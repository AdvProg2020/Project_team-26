create table category_feature
(
    category_feature_id int auto_increment primary key,
    name                varchar(50) charset utf8             not null,
    type                enum ('DOUBLE', 'INTEGER', 'STRING') not null,
    constraint category_feature_category_feature_id_uindex
        unique (category_feature_id)
);

create table promo
(
    promo_id         int auto_increment primary key,
    promo_code       varchar(50) charset utf8 not null,
    start_date       datetime                 not null,
    end_date         datetime                 not null,
    discount_percent decimal                  not null,
    max_discount     decimal                  not null,
    max_valid_use    int                      not null,
    constraint promo_promo_code_uindex
        unique (promo_code),
    constraint promo_promo_id_uindex
        unique (promo_id)
);

create table user
(
    user_id  int auto_increment primary key,
    username varchar(50) charset utf8             not null,
    password varchar(50) charset utf8             not null,
    email    varchar(50) charset utf8             not null,
    role     enum ('ADMIN', 'SELLER', 'CUSTOMER') not null,
    credit   decimal                              not null,
    DTYPE    varchar(31)                          not null,
    constraint user_email_uindex
        unique (email),
    constraint user_user_id_uindex
        unique (user_id),
    constraint user_username_uindex
        unique (username)
);

create table customer_promo
(
    customer_promo_id int auto_increment primary key,
    customer_id       int not null,
    promo_id          int not null,
    constraint customer_promo_customer_promo_id_uindex
        unique (customer_promo_id),
    constraint customer_promo_promo_promo_id_fk
        foreign key (promo_id) references promo (promo_id),
    constraint customer_promo_user_user_id_fk
        foreign key (customer_id) references user (user_id)
);

create table off
(
    off_id     int auto_increment primary key,
    seller_id  int      not null,
    start_date datetime not null,
    end_date   datetime not null,
    constraint off_off_id_uindex
        unique (off_id),
    constraint off_user_user_id_fk
        foreign key (seller_id) references user (user_id)
);

create table `order`
(
    order_id    int auto_increment primary key,
    customer_id int                       not null,
    promo_id    int                       not null,
    date        datetime                  not null,
    address     varchar(100) charset utf8 not null,
    constraint order_order_id_uindex
        unique (order_id),
    constraint order_promo_promo_id_fk
        foreign key (promo_id) references promo (promo_id),
    constraint order_user_user_id_fk
        foreign key (customer_id) references user (user_id)
);

create table user_details
(
    user_details_id int auto_increment primary key,
    user_id         int                       not null,
    `key`           varchar(25) charset utf8  not null,
    value           varchar(100) charset utf8 not null,
    constraint user_details_user_details_id_uindex
        unique (user_details_id),
    constraint user_details_user_user_id_fk
        foreign key (user_id) references user (user_id)
);

create table user_promo
(
    customer_id int not null,
    promo_id    int not null,
    constraint FK8gtg1f0xnt3vkk8byx1rcjknx
        foreign key (customer_id) references user (user_id),
    constraint FKqawygia5l13e8hoph4dv60gj4
        foreign key (promo_id) references promo (promo_id)
);

-- Cyclic dependencies found

create table category
(
    category_id int auto_increment primary key,
    name        varchar(20) charset utf8 not null,
    parent_id   int                      not null,
    constraint category_category_id_uindex
        unique (category_id),
    constraint category_name_uindex
        unique (name),
    constraint category_category_category_id_fk
        foreign key (parent_id) references category (category_id)
);

create table category_category_feature
(
    category_id         int not null,
    category_feature_id int not null,
    constraint category_feature_category_category_id_fk
        foreign key (category_id) references category (category_id),
    constraint category_feature_category_feature_id_fk
        foreign key (category_feature_id) references category_feature (category_feature_id)
);

create table product
(
    product_id  int auto_increment primary key,
    category_id int                        not null,
    name        varchar(50) charset utf8   not null,
    brand       varchar(50) charset utf8   not null,
    description varchar(1000) charset utf8 not null,
    constraint product_name_uindex
        unique (name),
    constraint product_product_id_uindex
        unique (product_id),
    constraint product_category_category_id_fk
        foreign key (category_id) references category (category_id)
);

create table comment
(
    comment_id  int auto_increment primary key,
    product_id  int                                                             not null,
    customer_id int                                                             not null,
    title       varchar(50) charset utf8                                        not null,
    text        varchar(200) charset utf8                                       not null,
    state       enum ('WAITING_FOR_CONFIRMATION', 'CONFIRMED', 'NOT_CONFIRMED') null,
    constraint comment_comment_id_uindex
        unique (comment_id),
    constraint comment_product_product_id_fk
        foreign key (product_id) references product (product_id),
    constraint comment_user_user_id_fk
        foreign key (customer_id) references user (user_id)
);

create table off_details
(
    off_details_id int auto_increment primary key,
    off_id         int     not null,
    product_id     int     not null,
    price_in_off   decimal not null,
    constraint off_item_off_details_id_uindex
        unique (off_details_id),
    constraint off_details_off_off_id_fk
        foreign key (off_id) references off (off_id),
    constraint off_item_product_product_id_fk
        foreign key (product_id) references product (product_id)
);

create table order_details
(
    order_details_id int auto_increment primary key,
    order_id         int                                          not null,
    product_id       int                                          not null,
    seller_id        int                                          not null,
    amount           int                                          not null,
    price            decimal                                      not null,
    paid_price       decimal                                      not null,
    shipment_state   enum ('WAITING_TO_SEND', 'SENT', 'RECEIVED') not null,
    constraint order_details_order_details_id_uindex
        unique (order_details_id),
    constraint order_details_order_order_id_fk
        foreign key (order_id) references `order` (order_id),
    constraint order_details_product_product_id_fk
        foreign key (product_id) references product (product_id),
    constraint order_details_user_user_id_fk
        foreign key (seller_id) references user (user_id)
);

create table product_category_feature
(
    product_id          int                       not null,
    category_feature_id int                       not null,
    value               varchar(100) charset utf8 not null,
    constraint product_category_feature_category_feature_category_feature_id_fk
        foreign key (category_feature_id) references category_feature (category_feature_id),
    constraint product_category_feature_product_product_id_fk
        foreign key (product_id) references product (product_id)
);

create table product_seller
(
    product_seller_id int auto_increment primary key,
    product_id        int     not null,
    seller_id         int     not null,
    price             decimal not null,
    remaining_items   int     not null,
    constraint product_seller_product_seller_id_uindex
        unique (product_seller_id),
    constraint product_seller_product_product_id_fk
        foreign key (product_id) references product (product_id),
    constraint product_seller_user_user_id_fk
        foreign key (seller_id) references user (user_id)
);

create table rate
(
    rate_id     int auto_increment primary key,
    customer_id int not null,
    product_id  int not null,
    score       int not null,
    constraint rate_rate_id_uindex
        unique (rate_id),
    constraint rate_product_product_id_fk
        foreign key (product_id) references product (product_id),
    constraint rate_user_user_id_fk
        foreign key (customer_id) references user (user_id)
);

create view product_rate as
select product.product_id AS product_id, avg(rate.score) AS average_rate
from (product
         left join rate on ((rate.product_id = product.product_id)))
group by product.product_id;

create view product_seller_off as
select ps.product_seller_id AS product_seller_id, oi.price_in_off AS price_in_off
from ((product_seller ps join store.off o on ((ps.seller_id = o.seller_id)))
         join off_details oi on ((oi.off_id = o.off_id)))
where (now() between o.start_date and o.end_date);
